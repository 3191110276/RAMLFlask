class {{ tmpl.class_name }}(Generated_Class_Base):
    {{ tmpl.documentation }}

    def __init__(self, request, resp_t={{ tmpl.resp_types }}):
        self.req = request
        self.enforced_type = True
        self.resp_t = resp_t

    def auth_handler(self):
        {{ tmpl.auth }}

    def validate_params_handler(self):
        validations = {{ tmpl.validation }}
        uri_in = self.req.view_args
        get_in = self.req.args
        body_in = self.req.data
        mime_type = self.req.mimetype

        # Validate URI paramters
        check = validate_request_parameter(validations, uri_in)
        if check.proceed == False:
            return check

        # Validate query string
        check = validate_query_string(validations, get_in)
        if check.proceed == False:
            return check

        # Validate query mime type and body
        check = validate_body_params(validations, body_in, mime_type)
        if check.proceed == False:
            return check

        custom_processing = self.add_validate_params_handler({{ tmpl.args_search }})

        return custom_processing

    def add_validate_params_handler({{ tmpl.args_list }}):
        return Response_Element()

    def check_overriden(self):
        overriden = []

        for method in ('auth_handler', 'validate_params_handler', '__init__', 'handle_request'):
            this_method = getattr(self, method)
            base_method = getattr({{ tmpl.class_name }}, method)

            if this_method.__func__ is not base_method.__func__:
                overriden.append(method)

        return overriden

    def request_handler(self):
        {{ tmpl.return_val }}